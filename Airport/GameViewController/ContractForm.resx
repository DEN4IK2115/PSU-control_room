<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picTime.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>